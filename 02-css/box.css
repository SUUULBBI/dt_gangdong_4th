.container {
    display : flex;
    /* flex : 수평으로 만들어줌. */
    gap: 20px;
    /* flex 로 인한 사이 띄어지는 갭을 줌. */

}

.box {
    width: 200px;
    height: 100px;
    border-width: 10px;
    border-style: solid;
    border-color: red;
    /* 위 3가지를 단축속성으로는 아래와 같이 쓰면 됨. 
    border : 10px solid red; */
    background-color: skyblue;
    padding: 20px;
}
.content-box {
    box-sizing: content-box;
    /* width : 260px , height : 160px */
}

.border-box {
    box-sizing: border-box;
    /* width : 200px height : 100px */
    /* 보통은 border box 를 많이 사용해서 개발함. */

    /* brder-box 
        : 지정된 너비와 높이 내에서 패딩과 테두리를 포함하므로 실제로 콘텐츠가 차지할 수 있는 공간이 작아짐.  */
}


    /* 
    content-box 장단점
        ㄴ 장점 : 콘텐츠 유연성 : 지정된 크기에 따라 동적으로 조정되므로 디자인의 유연성이 높다.
        ㄴ디자인 제어 : 패딩, 테두리를 분리하여 디자인 요소를 더 정교하게 제어 가능.
        
        단점 : 레이아웃 복잡성 (다 각각 계산해야 하므로 시간과 노력이 요구됨)
        또한 계산 오류 가능성이 생길 수 있음(별도로 계산하다가 계산 오류가 발생할 확률이 높음.)
    */


    /* border-box 장단점
        ㄴ장점 : 예측가능성 (총 너비와 높이가 예측 가능함. 원하던 정도로 나옴)
        유지보수성이 높고 간편한 계산 가능 (일관된 디자인 가능, 별도로 계산할 필요가 없어짐.)
        
        단점 : 내용공간 감소 (패딩과 테두리가 포함되므로 실제 콘텐츠 영역이 작아짐.
    */
